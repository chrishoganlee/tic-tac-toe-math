{"ast":null,"code":"class TicTacToeMath {\n  constructor() {\n    this.board = Array(9).fill(null);\n    this.currentPlayer = 'X';\n    this.timeLimit = 10000; // 10 seconds in milliseconds\n  }\n  makeMove(index) {\n    if (this.board[index] === null) {\n      this.board[index] = this.currentPlayer;\n      this.currentPlayer = this.currentPlayer === 'X' ? 'O' : 'X';\n      return true;\n    }\n    return false;\n  }\n  checkWinner() {\n    const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8],\n    // Rows\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    // Columns\n    [0, 4, 8], [2, 4, 6] // Diagonals\n    ];\n    for (let combo of winningCombos) {\n      const [a, b, c] = combo;\n      if (this.board[a] && this.board[a] === this.board[b] && this.board[a] === this.board[c]) {\n        return this.board[a];\n      }\n    }\n    if (this.board.every(cell => cell !== null)) {\n      return 'tie';\n    }\n    return null;\n  }\n  generateMathQuestion() {\n    const operations = ['+', '-', '*'];\n    const operation = operations[Math.floor(Math.random() * operations.length)];\n    let num1, num2, answer;\n    switch (operation) {\n      case '+':\n        num1 = Math.floor(Math.random() * 20) + 1;\n        num2 = Math.floor(Math.random() * 20) + 1;\n        answer = num1 + num2;\n        break;\n      case '-':\n        num1 = Math.floor(Math.random() * 20) + 1;\n        num2 = Math.floor(Math.random() * num1) + 1;\n        answer = num1 - num2;\n        break;\n      case '*':\n        num1 = Math.floor(Math.random() * 10) + 1;\n        num2 = Math.floor(Math.random() * 10) + 1;\n        answer = num1 * num2;\n        break;\n    }\n    return {\n      question: `${num1} ${operation} ${num2} = ?`,\n      answer: answer\n    };\n  }\n}\nexport default TicTacToeMath;","map":{"version":3,"names":["TicTacToeMath","constructor","board","Array","fill","currentPlayer","timeLimit","makeMove","index","checkWinner","winningCombos","combo","a","b","c","every","cell","generateMathQuestion","operations","operation","Math","floor","random","length","num1","num2","answer","question"],"sources":["C:/projects/tic-tac-toe-math/src/TicTacToeMath.js"],"sourcesContent":["class TicTacToeMath {\r\n    constructor() {\r\n      this.board = Array(9).fill(null);\r\n      this.currentPlayer = 'X';\r\n      this.timeLimit = 10000; // 10 seconds in milliseconds\r\n    }\r\n  \r\n    makeMove(index) {\r\n      if (this.board[index] === null) {\r\n        this.board[index] = this.currentPlayer;\r\n        this.currentPlayer = this.currentPlayer === 'X' ? 'O' : 'X';\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  \r\n    checkWinner() {\r\n      const winningCombos = [\r\n        [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\r\n        [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\r\n        [0, 4, 8], [2, 4, 6]             // Diagonals\r\n      ];\r\n  \r\n      for (let combo of winningCombos) {\r\n        const [a, b, c] = combo;\r\n        if (this.board[a] && this.board[a] === this.board[b] && this.board[a] === this.board[c]) {\r\n          return this.board[a];\r\n        }\r\n      }\r\n  \r\n      if (this.board.every(cell => cell !== null)) {\r\n        return 'tie';\r\n      }\r\n  \r\n      return null;\r\n    }\r\n  \r\n    generateMathQuestion() {\r\n      const operations = ['+', '-', '*'];\r\n      const operation = operations[Math.floor(Math.random() * operations.length)];\r\n      let num1, num2, answer;\r\n  \r\n      switch (operation) {\r\n        case '+':\r\n          num1 = Math.floor(Math.random() * 20) + 1;\r\n          num2 = Math.floor(Math.random() * 20) + 1;\r\n          answer = num1 + num2;\r\n          break;\r\n        case '-':\r\n          num1 = Math.floor(Math.random() * 20) + 1;\r\n          num2 = Math.floor(Math.random() * num1) + 1;\r\n          answer = num1 - num2;\r\n          break;\r\n        case '*':\r\n          num1 = Math.floor(Math.random() * 10) + 1;\r\n          num2 = Math.floor(Math.random() * 10) + 1;\r\n          answer = num1 * num2;\r\n          break;\r\n      }\r\n  \r\n      return {\r\n        question: `${num1} ${operation} ${num2} = ?`,\r\n        answer: answer\r\n      };\r\n    }\r\n  }\r\n  \r\n  export default TicTacToeMath;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}