{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\tic-tac-toe-math\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/**\n * Tic Tac Toe Math Game\n * \n * This game combines the classic Tic Tac Toe with elementary math problems.\n * Players must solve a math question before making a move.\n * \n * @author Chris Hogan\n * @date 2024-07-04\n * @lastModified 2024-07-04\n * @version 1.2.0\n * \n * Coding assistance provided by Claude 3.5 AI\n */\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport TicTacToeMath from './TicTacToeMath';\nimport './Game.css';\nimport backgroundImage from './background.jfif';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game() {\n  _s();\n  const [game, setGame] = useState(new TicTacToeMath());\n  const [board, setBoard] = useState(game.board);\n  const [currentPlayer, setCurrentPlayer] = useState(game.currentPlayer);\n  const [mathQuestion, setMathQuestion] = useState(game.generateMathQuestion());\n  const [answer, setAnswer] = useState('');\n  const [message, setMessage] = useState('');\n  const [timeLeft, setTimeLeft] = useState(10);\n  const [scores, setScores] = useState({\n    X: 0,\n    O: 0\n  });\n  const [idleRotations, setIdleRotations] = useState(0);\n  const [showIdlePopup, setShowIdlePopup] = useState(false);\n  const timerRef = useRef(null);\n  const idleTimerRef = useRef(null);\n\n  /**\n   * Effect hook to start timer and idle detection\n   */\n  useEffect(() => {\n    startTimer();\n    startIdleTimer();\n    return () => {\n      clearInterval(timerRef.current);\n      clearTimeout(idleTimerRef.current);\n    };\n  }, [currentPlayer, mathQuestion]);\n\n  /**\n   * Starts the turn timer\n   */\n  const startTimer = () => {\n    setTimeLeft(10);\n    if (timerRef.current) clearInterval(timerRef.current);\n    timerRef.current = setInterval(() => {\n      setTimeLeft(time => {\n        if (time === 0) {\n          clearInterval(timerRef.current);\n          switchPlayer();\n          return 10;\n        }\n        return time - 1;\n      });\n    }, 1000);\n  };\n\n  /**\n   * Starts the idle detection timer\n   */\n  const startIdleTimer = () => {\n    clearTimeout(idleTimerRef.current);\n    idleTimerRef.current = setTimeout(() => {\n      setIdleRotations(prev => prev + 1);\n      if (idleRotations >= 2) {\n        setShowIdlePopup(true);\n        setTimeout(() => {\n          if (showIdlePopup) {\n            closeGame();\n          }\n        }, 120000); // 120 seconds\n      }\n    }, 30000); // 30 seconds for each player's turn\n  };\n\n  /**\n   * Resets the idle timer\n   */\n  const resetIdleTimer = () => {\n    setIdleRotations(0);\n    startIdleTimer();\n  };\n\n  /**\n   * Switches to the next player\n   */\n  const switchPlayer = () => {\n    const nextPlayer = currentPlayer === 'X' ? 'O' : 'X';\n    setCurrentPlayer(nextPlayer);\n    setMathQuestion(game.generateMathQuestion());\n    setAnswer('');\n    setMessage(`${nextPlayer}'s turn.`);\n  };\n\n  /**\n   * Handles cell click event\n   * @param {number} index - The index of the clicked cell\n   */\n  const handleCellClick = index => {\n    if (game.board[index] === null) {\n      if (parseInt(answer) === mathQuestion.answer) {\n        if (game.makeMove(index)) {\n          setBoard([...game.board]);\n          clearInterval(timerRef.current);\n          resetIdleTimer();\n          const winner = game.checkWinner();\n          if (winner) {\n            if (winner !== 'tie') {\n              setScores(prevScores => ({\n                ...prevScores,\n                [winner]: prevScores[winner] + 1\n              }));\n            }\n            setMessage(winner === 'tie' ? \"It's a tie!\" : `Player ${winner} wins!`);\n            setTimeout(resetBoard, 3000); // Reset board after 3 seconds\n          } else {\n            switchPlayer();\n          }\n        }\n      } else {\n        setMessage('Incorrect answer. Try again!');\n      }\n    }\n  };\n\n  /**\n   * Handles answer input change\n   * @param {Event} e - The input change event\n   */\n  const handleAnswerChange = e => {\n    setAnswer(e.target.value);\n  };\n\n  /**\n   * Handles answer submission\n   * @param {Event} e - The form submission event\n   */\n  const handleAnswerSubmit = e => {\n    e.preventDefault();\n    if (parseInt(answer) === mathQuestion.answer) {\n      clearInterval(timerRef.current);\n      setMessage('Correct! Make your move.');\n      resetIdleTimer();\n    } else {\n      setMessage('Incorrect answer. Try again!');\n    }\n  };\n\n  /**\n   * Resets the game board\n   */\n  const resetBoard = () => {\n    setGame(new TicTacToeMath());\n    setBoard(Array(9).fill(null));\n    setCurrentPlayer('X');\n    setMathQuestion(game.generateMathQuestion());\n    setAnswer('');\n    setMessage('');\n    setTimeLeft(10);\n  };\n\n  /**\n   * Resets the entire game including scores\n   */\n  const resetGame = () => {\n    resetBoard();\n    setScores({\n      X: 0,\n      O: 0\n    });\n  };\n\n  /**\n   * Closes the game due to inactivity\n   */\n  const closeGame = () => {\n    resetGame();\n    setMessage('Game closed due to inactivity. Start a new game!');\n  };\n\n  /**\n   * Handles response to idle popup\n   * @param {string} response - The user's response ('yes' or 'no')\n   */\n  const handleIdleResponse = response => {\n    setShowIdlePopup(false);\n    if (response === 'yes') {\n      resetIdleTimer();\n    } else {\n      closeGame();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    style: {\n      backgroundImage: `url(${backgroundImage})`\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scoreboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Scoreboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Player X: \", scores.X]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Player O: \", scores.O]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tic Tac Toe Math\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Current Player: \", currentPlayer]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Time Left: \", timeLeft, \" seconds\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"math-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: mathQuestion.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleAnswerSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: answer,\n            onChange: handleAnswerChange,\n            placeholder: \"Enter your answer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: board.map((cell, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `cell ${cell}`,\n          onClick: () => handleCellClick(index),\n          children: cell\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: resetGame,\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), showIdlePopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"idle-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Are you still playing?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleIdleResponse('yes'),\n        children: \"Yes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleIdleResponse('no'),\n        children: \"No\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"K7ib+knk1oUU+DCs1/lUbxlwBns=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useRef","TicTacToeMath","backgroundImage","jsxDEV","_jsxDEV","Game","_s","game","setGame","board","setBoard","currentPlayer","setCurrentPlayer","mathQuestion","setMathQuestion","generateMathQuestion","answer","setAnswer","message","setMessage","timeLeft","setTimeLeft","scores","setScores","X","O","idleRotations","setIdleRotations","showIdlePopup","setShowIdlePopup","timerRef","idleTimerRef","startTimer","startIdleTimer","clearInterval","current","clearTimeout","setInterval","time","switchPlayer","setTimeout","prev","closeGame","resetIdleTimer","nextPlayer","handleCellClick","index","parseInt","makeMove","winner","checkWinner","prevScores","resetBoard","handleAnswerChange","e","target","value","handleAnswerSubmit","preventDefault","Array","fill","resetGame","handleIdleResponse","response","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","question","onSubmit","type","onChange","placeholder","map","cell","onClick","_c","$RefreshReg$"],"sources":["C:/projects/tic-tac-toe-math/src/App.js"],"sourcesContent":["/**\n * Tic Tac Toe Math Game\n * \n * This game combines the classic Tic Tac Toe with elementary math problems.\n * Players must solve a math question before making a move.\n * \n * @author Chris Hogan\n * @date 2024-07-04\n * @lastModified 2024-07-04\n * @version 1.2.0\n * \n * Coding assistance provided by Claude 3.5 AI\n */\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport TicTacToeMath from './TicTacToeMath';\nimport './Game.css';\nimport backgroundImage from './background.jfif';\n\nfunction Game() {\n  const [game, setGame] = useState(new TicTacToeMath());\n  const [board, setBoard] = useState(game.board);\n  const [currentPlayer, setCurrentPlayer] = useState(game.currentPlayer);\n  const [mathQuestion, setMathQuestion] = useState(game.generateMathQuestion());\n  const [answer, setAnswer] = useState('');\n  const [message, setMessage] = useState('');\n  const [timeLeft, setTimeLeft] = useState(10);\n  const [scores, setScores] = useState({ X: 0, O: 0 });\n  const [idleRotations, setIdleRotations] = useState(0);\n  const [showIdlePopup, setShowIdlePopup] = useState(false);\n  const timerRef = useRef(null);\n  const idleTimerRef = useRef(null);\n\n  /**\n   * Effect hook to start timer and idle detection\n   */\n  useEffect(() => {\n    startTimer();\n    startIdleTimer();\n    return () => {\n      clearInterval(timerRef.current);\n      clearTimeout(idleTimerRef.current);\n    };\n  }, [currentPlayer, mathQuestion]);\n\n  /**\n   * Starts the turn timer\n   */\n  const startTimer = () => {\n    setTimeLeft(10);\n    if (timerRef.current) clearInterval(timerRef.current);\n    timerRef.current = setInterval(() => {\n      setTimeLeft((time) => {\n        if (time === 0) {\n          clearInterval(timerRef.current);\n          switchPlayer();\n          return 10;\n        }\n        return time - 1;\n      });\n    }, 1000);\n  };\n\n  /**\n   * Starts the idle detection timer\n   */\n  const startIdleTimer = () => {\n    clearTimeout(idleTimerRef.current);\n    idleTimerRef.current = setTimeout(() => {\n      setIdleRotations(prev => prev + 1);\n      if (idleRotations >= 2) {\n        setShowIdlePopup(true);\n        setTimeout(() => {\n          if (showIdlePopup) {\n            closeGame();\n          }\n        }, 120000);  // 120 seconds\n      }\n    }, 30000);  // 30 seconds for each player's turn\n  };\n\n  /**\n   * Resets the idle timer\n   */\n  const resetIdleTimer = () => {\n    setIdleRotations(0);\n    startIdleTimer();\n  };\n\n  /**\n   * Switches to the next player\n   */\n  const switchPlayer = () => {\n    const nextPlayer = currentPlayer === 'X' ? 'O' : 'X';\n    setCurrentPlayer(nextPlayer);\n    setMathQuestion(game.generateMathQuestion());\n    setAnswer('');\n    setMessage(`${nextPlayer}'s turn.`);\n  };\n\n  /**\n   * Handles cell click event\n   * @param {number} index - The index of the clicked cell\n   */\n  const handleCellClick = (index) => {\n    if (game.board[index] === null) {\n      if (parseInt(answer) === mathQuestion.answer) {\n        if (game.makeMove(index)) {\n          setBoard([...game.board]);\n          clearInterval(timerRef.current);\n          resetIdleTimer();\n          const winner = game.checkWinner();\n          if (winner) {\n            if (winner !== 'tie') {\n              setScores(prevScores => ({\n                ...prevScores,\n                [winner]: prevScores[winner] + 1\n              }));\n            }\n            setMessage(winner === 'tie' ? \"It's a tie!\" : `Player ${winner} wins!`);\n            setTimeout(resetBoard, 3000);  // Reset board after 3 seconds\n          } else {\n            switchPlayer();\n          }\n        }\n      } else {\n        setMessage('Incorrect answer. Try again!');\n      }\n    }\n  };\n\n  /**\n   * Handles answer input change\n   * @param {Event} e - The input change event\n   */\n  const handleAnswerChange = (e) => {\n    setAnswer(e.target.value);\n  };\n\n  /**\n   * Handles answer submission\n   * @param {Event} e - The form submission event\n   */\n  const handleAnswerSubmit = (e) => {\n    e.preventDefault();\n    if (parseInt(answer) === mathQuestion.answer) {\n      clearInterval(timerRef.current);\n      setMessage('Correct! Make your move.');\n      resetIdleTimer();\n    } else {\n      setMessage('Incorrect answer. Try again!');\n    }\n  };\n\n  /**\n   * Resets the game board\n   */\n  const resetBoard = () => {\n    setGame(new TicTacToeMath());\n    setBoard(Array(9).fill(null));\n    setCurrentPlayer('X');\n    setMathQuestion(game.generateMathQuestion());\n    setAnswer('');\n    setMessage('');\n    setTimeLeft(10);\n  };\n\n  /**\n   * Resets the entire game including scores\n   */\n  const resetGame = () => {\n    resetBoard();\n    setScores({ X: 0, O: 0 });\n  };\n\n  /**\n   * Closes the game due to inactivity\n   */\n  const closeGame = () => {\n    resetGame();\n    setMessage('Game closed due to inactivity. Start a new game!');\n  };\n\n  /**\n   * Handles response to idle popup\n   * @param {string} response - The user's response ('yes' or 'no')\n   */\n  const handleIdleResponse = (response) => {\n    setShowIdlePopup(false);\n    if (response === 'yes') {\n      resetIdleTimer();\n    } else {\n      closeGame();\n    }\n  };\n\n  return (\n    <div className=\"game-container\" style={{backgroundImage: `url(${backgroundImage})`}}>\n      <div className=\"scoreboard\">\n        <h2>Scoreboard</h2>\n        <div>Player X: {scores.X}</div>\n        <div>Player O: {scores.O}</div>\n      </div>\n      <div className=\"game\">\n        <h1>Tic Tac Toe Math</h1>\n        <div className=\"game-info\">\n          <div>Current Player: {currentPlayer}</div>\n          <div>Time Left: {timeLeft} seconds</div>\n        </div>\n        <div className=\"math-question\">\n          <p>{mathQuestion.question}</p>\n          <form onSubmit={handleAnswerSubmit}>\n            <input\n              type=\"number\"\n              value={answer}\n              onChange={handleAnswerChange}\n              placeholder=\"Enter your answer\"\n            />\n            <button type=\"submit\">Submit</button>\n          </form>\n        </div>\n        <div className=\"game-board\">\n          {board.map((cell, index) => (\n            <button \n              key={index} \n              className={`cell ${cell}`} \n              onClick={() => handleCellClick(index)}\n            >\n              {cell}\n            </button>\n          ))}\n        </div>\n        <div className=\"message\">{message}</div>\n        <button className=\"reset-button\" onClick={resetGame}>Reset Game</button>\n      </div>\n      {showIdlePopup && (\n        <div className=\"idle-popup\">\n          <p>Are you still playing?</p>\n          <button onClick={() => handleIdleResponse('yes')}>Yes</button>\n          <button onClick={() => handleIdleResponse('no')}>No</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}