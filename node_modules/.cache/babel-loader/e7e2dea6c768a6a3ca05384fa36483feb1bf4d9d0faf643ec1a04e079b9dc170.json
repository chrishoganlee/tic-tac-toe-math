{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\tic-tac-toe-math\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport TicTacToeMath from './TicTacToeMath';\nimport './Game.css';\nimport backgroundImage from './background.jfif'; // Make sure this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game() {\n  _s();\n  // ... (previous state variables)\n  const [idleRotations, setIdleRotations] = useState(0);\n  const [showIdlePopup, setShowIdlePopup] = useState(false);\n  const idleTimerRef = useRef(null);\n  useEffect(() => {\n    startTimer();\n    startIdleTimer();\n    return () => {\n      clearInterval(timerRef.current);\n      clearTimeout(idleTimerRef.current);\n    };\n  }, [currentPlayer, mathQuestion]);\n  const startIdleTimer = () => {\n    clearTimeout(idleTimerRef.current);\n    idleTimerRef.current = setTimeout(() => {\n      setIdleRotations(prev => prev + 1);\n      if (idleRotations >= 2) {\n        setShowIdlePopup(true);\n        setTimeout(() => {\n          if (showIdlePopup) {\n            closeGame();\n          }\n        }, 120000); // 120 seconds\n      }\n    }, 30000); // 30 seconds for each player's turn\n  };\n  const resetIdleTimer = () => {\n    setIdleRotations(0);\n    startIdleTimer();\n  };\n  const handleCellClick = index => {\n    if (game.board[index] === null) {\n      if (parseInt(answer) === mathQuestion.answer) {\n        if (game.makeMove(index)) {\n          setBoard([...game.board]);\n          clearInterval(timerRef.current);\n          resetIdleTimer();\n          // ... (rest of the function remains the same)\n        }\n      } else {\n        setMessage('Incorrect answer. Try again!');\n      }\n    }\n  };\n  const handleAnswerSubmit = e => {\n    e.preventDefault();\n    if (parseInt(answer) === mathQuestion.answer) {\n      clearInterval(timerRef.current);\n      setMessage('Correct! Make your move.');\n      resetIdleTimer();\n    } else {\n      setMessage('Incorrect answer. Try again!');\n    }\n  };\n  const closeGame = () => {\n    // In a web context, we can't actually close the browser window\n    // So instead, we'll reset the game and show a message\n    resetGame();\n    setMessage('Game closed due to inactivity. Start a new game!');\n  };\n  const handleIdleResponse = response => {\n    setShowIdlePopup(false);\n    if (response === 'yes') {\n      resetIdleTimer();\n    } else {\n      closeGame();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    style: {\n      backgroundImage: `url(${backgroundImage})`\n    },\n    children: showIdlePopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"idle-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Are you still playing?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleIdleResponse('yes'),\n        children: \"Yes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleIdleResponse('no'),\n        children: \"No\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"7MHfDCmpaORo8NvSKlrFxX7dKgs=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useRef","TicTacToeMath","backgroundImage","jsxDEV","_jsxDEV","Game","_s","idleRotations","setIdleRotations","showIdlePopup","setShowIdlePopup","idleTimerRef","startTimer","startIdleTimer","clearInterval","timerRef","current","clearTimeout","currentPlayer","mathQuestion","setTimeout","prev","closeGame","resetIdleTimer","handleCellClick","index","game","board","parseInt","answer","makeMove","setBoard","setMessage","handleAnswerSubmit","e","preventDefault","resetGame","handleIdleResponse","response","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/projects/tic-tac-toe-math/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport TicTacToeMath from './TicTacToeMath';\nimport './Game.css';\nimport backgroundImage from './background.jfif';  // Make sure this path is correct\n\nfunction Game() {\n  // ... (previous state variables)\n  const [idleRotations, setIdleRotations] = useState(0);\n  const [showIdlePopup, setShowIdlePopup] = useState(false);\n  const idleTimerRef = useRef(null);\n\n  useEffect(() => {\n    startTimer();\n    startIdleTimer();\n    return () => {\n      clearInterval(timerRef.current);\n      clearTimeout(idleTimerRef.current);\n    };\n  }, [currentPlayer, mathQuestion]);\n\n  const startIdleTimer = () => {\n    clearTimeout(idleTimerRef.current);\n    idleTimerRef.current = setTimeout(() => {\n      setIdleRotations(prev => prev + 1);\n      if (idleRotations >= 2) {\n        setShowIdlePopup(true);\n        setTimeout(() => {\n          if (showIdlePopup) {\n            closeGame();\n          }\n        }, 120000);  // 120 seconds\n      }\n    }, 30000);  // 30 seconds for each player's turn\n  };\n\n  const resetIdleTimer = () => {\n    setIdleRotations(0);\n    startIdleTimer();\n  };\n\n  const handleCellClick = (index) => {\n    if (game.board[index] === null) {\n      if (parseInt(answer) === mathQuestion.answer) {\n        if (game.makeMove(index)) {\n          setBoard([...game.board]);\n          clearInterval(timerRef.current);\n          resetIdleTimer();\n          // ... (rest of the function remains the same)\n        }\n      } else {\n        setMessage('Incorrect answer. Try again!');\n      }\n    }\n  };\n\n  const handleAnswerSubmit = (e) => {\n    e.preventDefault();\n    if (parseInt(answer) === mathQuestion.answer) {\n      clearInterval(timerRef.current);\n      setMessage('Correct! Make your move.');\n      resetIdleTimer();\n    } else {\n      setMessage('Incorrect answer. Try again!');\n    }\n  };\n\n  const closeGame = () => {\n    // In a web context, we can't actually close the browser window\n    // So instead, we'll reset the game and show a message\n    resetGame();\n    setMessage('Game closed due to inactivity. Start a new game!');\n  };\n\n  const handleIdleResponse = (response) => {\n    setShowIdlePopup(false);\n    if (response === 'yes') {\n      resetIdleTimer();\n    } else {\n      closeGame();\n    }\n  };\n\n  return (\n    <div className=\"game-container\" style={{backgroundImage: `url(${backgroundImage})`}}>\n      {/* ... (previous JSX) */}\n      {showIdlePopup && (\n        <div className=\"idle-popup\">\n          <p>Are you still playing?</p>\n          <button onClick={() => handleIdleResponse('yes')}>Yes</button>\n          <button onClick={() => handleIdleResponse('no')}>No</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}